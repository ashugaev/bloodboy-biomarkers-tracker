---
alwaysApply: true
---

- don't use any adjectives in names like: "fast", "simple", "quick", "heavy"
- Do not add fallbacks for legacy logic unless explicitly requested. Mention if backward compatibility is lost.
- Do not create any example files unless asked.
- Minimize your updates; make only necessary and important edits.
- Do not add fallbacks unless explicitly requested.
- Write all code comments in English, even if I speak in other languages.
- Do not delete any logs.
- Do not delete comments; modify only if needed.
- Do not delete any comments; modify only if required.
- Always minimize your updates; make only necessary and important edits.
- Use English only for coding.
- Do not use the ENV: prefix.
- Do not create .md files unless asked.
- Write less code to do less.
- Try to minimally affect existing logic.
- Avoid overhead in logs and try/catch.
- Improve function and constant naming; avoid unnecessary comments.
- Do not generate code that will not be used unless explicitly requested.
- Do not use runtime imports unless strictly necessary.
- Do not add any comments in code or change existing ones unless strictly necessary.
- Do not write obvious documentation; do not add args, return, etc., when the function is simple. Avoid redundancy.
- Use clean code principles.
- Do not create any example files or .md files for new features.
- Never use a fallback for a getter (`obj.get('field')`).
- Never wrap imports in try/catch. Imports are always on top of the file.
- **Always use camelCase for file names** (e.g., `recordKey.ts`, `entity.utils.ts`, not `record-key.ts`, `entity-utils.ts`)

## Import Rules
- **Always use absolute imports with `@/` alias** instead of relative imports
- ✅ Good: `import { Button } from '@/components/Button'`
- ❌ Bad: `import { Button } from '../Button'`
- ✅ Good: `import { db } from '@/db/services/db.service'`
- ❌ Bad: `import { db } from '../../services/db.service'`
- Import order:
  1. External packages (React, antd, etc.)
  2. Components (`@/components/...`)
  3. Database models (`@/db/...`)
  4. Other imports (`@/utils/...`, `@/constants/...`, etc.)
  5. Relative imports for local files (only `./ComponentName.types.ts`, `./ComponentName.utils.ts`)

## File Structure Rules

### Global Utilities (src/utils/, src/db/utils/, etc.)
- **One file = one utility function**
- Example: `src/utils/formatDate.ts` exports only `formatDate()`

### React Component Utilities
- **All component utilities in ComponentName.utils.ts**
- Multiple helper functions allowed in one file
- Example: `UploadArea/UploadArea.utils.ts` can export `createRecordKey()`, `validateFile()`, etc.

## Colors
- Always use color constants from `src/constants/colors.ts`
- Import: `import { COLORS } from '@/constants/colors'`
- Never use hardcoded color values like `#ff4d4f`, use `COLORS.ERROR` instead
